import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { UserRole } from '@prisma/client';
export declare class UsersController {
    private readonly usersService;
    constructor(usersService: UsersService);
    create(createUserDto: CreateUserDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    }>;
    findAll(): Promise<Partial<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    }>[]>;
    getProfile(req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    } | null>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    } | null>;
    updateProfile(req: any, updateUserDto: UpdateUserDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    }>;
    update(id: string, updateUserDto: UpdateUserDto): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    }>;
    remove(id: string): Promise<void>;
    findByRole(role: UserRole): Promise<Partial<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        email: string;
        firstName: string;
        lastName: string;
        password: string;
        role: import("@prisma/client").$Enums.UserRole;
        emailVerified: boolean;
        emailVerifiedAt: Date | null;
        avatar: string | null;
        phone: string | null;
        bio: string | null;
        website: string | null;
    }>[]>;
}
