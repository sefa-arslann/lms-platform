import { DeviceService } from './device.service';
export declare class DeviceController {
    private readonly deviceService;
    constructor(deviceService: DeviceService);
    getMyDevices(req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }[]>;
    enrollDevice(deviceInfo: any, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }>;
    approveEnrollRequest(body: {
        requestId: string;
    }, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }>;
    renameDevice(id: string, body: {
        deviceName: string;
    }, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }>;
    revokeDevice(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }>;
    setDeviceTrusted(id: string, body: {
        isTrusted: boolean;
    }, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        userId: string;
        installId: string;
        publicKey: string;
        platform: string;
        model: string | null;
        userAgent: string | null;
        firstIp: string;
        lastIp: string;
        lastSeenAt: Date;
        isTrusted: boolean;
        approvedAt: Date | null;
        deviceName: string | null;
        osVersion: string | null;
        appVersion: string | null;
    }>;
    getEnrollRequests(): never[];
}
