generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(cuid())
  email           String                @unique
  firstName       String
  lastName        String
  password        String
  role            UserRole              @default(STUDENT)
  isActive        Boolean               @default(true)
  emailVerified   Boolean               @default(false)
  emailVerifiedAt DateTime?
  avatar          String?
  phone           String?
  bio             String?
  website         String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  accessGrants    AccessGrant[]
  analyticsEvents AnalyticsEvent[]
  answers         Answer[]
  courseViews     CourseView[]
  courses         Course[]              @relation("CourseInstructor")
  enrollRequests  DeviceEnrollRequest[]
  progress        LessonProgress[]
  messageReplies  MessageReply[]
  adminMessages   Message[]             @relation("AdminMessages")
  messages        Message[]
  notes           Note[]
  orders          Order[]
  questions       Question[]
  devices         UserDevice[]
  userSessions    UserSession[]
  videoAnalytics  VideoAnalytics[]

  @@map("users")
}

model Course {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  description     String
  thumbnail       String?
  price           Decimal       @db.Decimal(10, 2)
  currency        String        @default("TRY")
  duration        Int
  level           CourseLevel
  language        String        @default("tr")
  instructorId    String
  isPublished     Boolean       @default(false)
  metaTitle       String?
  metaDescription String?
  keywords        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  accessGrants    AccessGrant[]
  courseViews     CourseView[]
  instructor      User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  orders          Order[]
  questions       Question[]
  sections        Section[]

  @@map("courses")
}

model Section {
  id           String   @id @default(cuid())
  title        String
  description  String?
  order        Int
  courseId     String
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  duration     Int      @default(0)
  totalLessons Int      @default(0)
  lessons      Lesson[]
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("sections")
}

model Lesson {
  id             String           @id @default(cuid())
  title          String
  description    String?
  videoUrl       String?
  duration       Int
  order          Int
  sectionId      String
  isPublished    Boolean          @default(false)
  videoKey       String?
  thumbnail      String?
  subtitles      Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isFree         Boolean          @default(false)
  resources      Json?
  videoType      String?          @default("VIDEO")
  progress       LessonProgress[]
  section        Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  notes          Note[]
  questions      Question[]
  videoAnalytics VideoAnalytics[]
  video          Video?

  @@map("lessons")
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  currency        String        @default("TRY")
  status          OrderStatus   @default(PENDING)
  amount          Decimal       @db.Decimal(10, 2)
  courseId        String
  expiresAt       DateTime?
  invoiceNumber   String?
  metadata        Json?
  paymentIntentId String?
  purchasedAt     DateTime      @default(now())
  paymentMethod   PaymentMethod
  billingInfo     Json?
  orderNumber     String        @unique
  accessGrants    AccessGrant[]
  course          Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model AccessGrant {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  startAt   DateTime  @default(now())
  endAt     DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orderId   String?
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order     Order?    @relation(fields: [orderId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("access_grants")
}

model UserDevice {
  id           String        @id @default(cuid())
  userId       String
  installId    String        @unique
  publicKey    String
  platform     String
  model        String?
  userAgent    String?
  firstIp      String
  lastIp       String
  lastSeenAt   DateTime      @default(now())
  isTrusted    Boolean       @default(false)
  isActive     Boolean       @default(true)
  approvedAt   DateTime?
  deviceName   String?
  osVersion    String?
  appVersion   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSessions UserSession[]

  @@map("user_devices")
}

model DeviceEnrollRequest {
  id         String       @id @default(cuid())
  userId     String
  installId  String?
  platform   String
  model      String?
  ip         String
  geoCountry String?
  requestId  String       @unique
  status     EnrollStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  expiresAt  DateTime
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("device_enroll_requests")
}

model LessonProgress {
  id           String    @id @default(cuid())
  userId       String
  lessonId     String
  progress     Float     @default(0)
  duration     Int       @default(0)
  completed    Boolean   @default(false)
  lastPosition Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  completedAt  DateTime?
  lesson       Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Question {
  id               String   @id @default(cuid())
  userId           String
  lessonId         String?
  title            String
  content          String
  isPinned         Boolean  @default(false)
  isAccepted       Boolean  @default(false)
  acceptedAnswerId String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  courseId         String
  answers          Answer[]
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson           Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  content    String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  content   String
  timestamp Float?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model SiteSetting {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("site_settings")
}

model Navigation {
  id        String   @id @default(cuid())
  name      String
  location  String
  items     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("navigation")
}

model Page {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         Json
  metaTitle       String?
  metaDescription String?
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("pages")
}

model Coupon {
  id         String     @id @default(cuid())
  code       String     @unique
  type       CouponType
  value      Decimal    @db.Decimal(10, 2)
  maxUses    Int?
  usedCount  Int        @default(0)
  isActive   Boolean    @default(true)
  validFrom  DateTime   @default(now())
  validUntil DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("coupons")
}

model AnalyticsEvent {
  id        String             @id @default(cuid())
  userId    String?
  eventType AnalyticsEventType
  eventData Json
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime           @default(now())
  user      User?              @relation(fields: [userId], references: [id])

  @@map("analytics_events")
}

model UserSession {
  id           String      @id @default(cuid())
  userId       String
  sessionId    String      @unique
  isActive     Boolean     @default(true)
  startedAt    DateTime    @default(now())
  lastActivity DateTime    @default(now())
  ipAddress    String?
  userAgent    String?
  deviceId     String?
  device       UserDevice? @relation(fields: [deviceId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@map("user_sessions")
}

model CourseView {
  id        String         @id @default(cuid())
  courseId  String
  userId    String?
  viewType  CourseViewType
  duration  Int?
  progress  Float?
  createdAt DateTime       @default(now())
  course    Course         @relation(fields: [courseId], references: [id])
  user      User?          @relation(fields: [userId], references: [id])

  @@map("course_views")
}

model VideoAnalytics {
  id        String      @id @default(cuid())
  videoId   String
  userId    String?
  lessonId  String?
  action    VideoAction
  timestamp Float?
  duration  Int?
  createdAt DateTime    @default(now())
  lesson    Lesson?     @relation(fields: [lessonId], references: [id])
  user      User?       @relation(fields: [userId], references: [id])
  video     Video       @relation(fields: [videoId], references: [id])

  @@map("video_analytics")
}

model Video {
  id          String           @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int
  lessonId    String           @unique
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  analytics   VideoAnalytics[]
  lesson      Lesson           @relation(fields: [lessonId], references: [id])

  @@map("videos")
}

model Message {
  id          String              @id @default(cuid())
  userId      String
  adminId     String?
  subject     String
  content     String
  messageType MessageType
  status      MessageStatus       @default(UNREAD)
  isRead      Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  attachments MessageAttachment[]
  replies     MessageReply[]
  admin       User?               @relation("AdminMessages", fields: [adminId], references: [id])
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageReply {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  content   String
  isAdmin   Boolean  @default(false)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message_replies")
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileUrl   String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  EDITOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
}

enum EnrollStatus {
  PENDING
  APPROVED
  DENIED
  EXPIRED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum AnalyticsEventType {
  PAGE_VIEW
  COURSE_VIEW
  VIDEO_PLAY
  VIDEO_PAUSE
  VIDEO_COMPLETE
  NOTE_CREATE
  QUESTION_ASK
  ANSWER_CREATE
  LOGIN
  LOGOUT
  SEARCH
  PURCHASE
}

enum CourseViewType {
  THUMBNAIL_CLICK
  COURSE_PAGE_VIEW
  VIDEO_START
  VIDEO_PROGRESS
  VIDEO_COMPLETE
}

enum VideoAction {
  PLAY
  PAUSE
  SEEK
  COMPLETE
  NOTE_CREATE
  QUESTION_ASK
}

enum MessageStatus {
  UNREAD
  READ
  REPLIED
  CLOSED
}

enum MessageType {
  QUESTION
  SUPPORT
  FEEDBACK
  GENERAL
}
